name: Flutter CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter version
        run: flutter --version

      - name: Create .env file
        run: cp .env.example .env

      - name: Create firebase_options.dart
        run: |
          mkdir -p lib
          cat > lib/firebase_options.dart << 'EOF'
          // File generated by FlutterFire CLI.
          // ignore_for_file: type=lint
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart'
              show defaultTargetPlatform, kIsWeb, TargetPlatform;

          /// Default [FirebaseOptions] for use with your Firebase apps.
          ///
          /// Example:
          /// ```dart
          /// import 'firebase_options.dart';
          /// // ...
          /// await Firebase.initializeApp(
          ///   options: DefaultFirebaseOptions.currentPlatform,
          /// );
          /// ```
          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) {
                throw UnsupportedError(
                  'DefaultFirebaseOptions have not been configured for web - '
                  'you can reconfigure this by running the FlutterFire CLI again.',
                );
              }
              switch (defaultTargetPlatform) {
                case TargetPlatform.android:
                  return android;
                case TargetPlatform.iOS:
                  return ios;
                case TargetPlatform.macOS:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for macos - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.windows:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for windows - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                case TargetPlatform.linux:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions have not been configured for linux - '
                    'you can reconfigure this by running the FlutterFire CLI again.',
                  );
                default:
                  throw UnsupportedError(
                    'DefaultFirebaseOptions are not supported for this platform.',
                  );
              }
            }

            static const FirebaseOptions android = FirebaseOptions(
              apiKey: 'dummy-api-key',
              appId: 'dummy-app-id',
              messagingSenderId: 'dummy-sender-id',
              projectId: 'dummy-project-id',
            );

            static const FirebaseOptions ios = FirebaseOptions(
              apiKey: 'dummy-api-key',
              appId: 'dummy-app-id',
              messagingSenderId: 'dummy-sender-id',
              projectId: 'dummy-project-id',
              iosBundleId: 'com.example.dummy',
            );
          }
          EOF

      - name: Install dependencies
        run: flutter pub get

      - name: Format check
        run: |
          dart format --output=none --set-exit-if-changed .

      - name: Static analysis
        run: flutter analyze

      - name: Run tests
        run: flutter test
